/*
  privacyIDEA Authenticator

  Authors: Timo Sturm <timo.sturm@netknights.it>

  Copyright (c) 2017-2019 NetKnights GmbH

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

import 'dart:convert';

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:privacyidea_authenticator/model/firebase_config.dart';
import 'package:privacyidea_authenticator/model/tokens.dart';

class FakeStorage {
  //flutter: All Keys:
  //flutter: Key: 1d7d5ad6-0e29-4955-b959-dde0ba8020ed_firebase_config
  //flutter: Value: {"projectID":"piauthenticator-dfbc6","projectNumber":"258156671446","appID":"1:258156671446:ios:f43e5ff74af21419253477","apiKey":"AIzaSyCHISaDD-Db44Cu9b0_AOyY9q4qUetLOvw"}
  //flutter: Key: cc0d13b2-9ce1-11ea-bb37-0242ac130002
  //flutter: Value: {"projectID":"piauthenticator-dfbc6","projectNumber":"258156671446","appID":"1:258156671446:ios:f43e5ff74af21419253477","apiKey":"AIzaSyCHISaDD-Db44Cu9b0_AOyY9q4qUetLOvw"}
  //flutter: Key: 1d7d5ad6-0e29-4955-b959-dde0ba8020ed
  //flutter: Value: {"label":"PIPU0000DDA0","id":"1d7d5ad6-0e29-4955-b959-dde0ba8020ed","issuer":"privacyIDEA","isRolledOut":true,"firebaseToken":"fwE_jCJfaeU:APA91bE5Lc2uWPNEAnYrOhc1sLBbN7MO_Ua1MdYvl4sr-w5SwBbPl1OgTA9FsMLd70-jiypL9I1ip1ejxIfs2mI7kAeXb7X3WNKYw-tfQlGxq5eX48Mojc_SpOuxi2hlbeLz9AXM2gJS","publicServerKey":{"modulus":"764454122894237352356258556290539179520675221611243422295872187182770540292532490482340960893226159516986828455691316724646870608828175804922510574552520164119064129142974112395655919375941949394539691317200388571078254318441527884987016339562108758901320551793862165440647475509363395795413478875348526337714602802444956420491013060559375281459665965320557934246262172258072420494423295368208334916406048331364149070223257658605541030768997272780402951724742666417070863297765412753050410489748789331733423363518450917779665314355755692090833165386574999157271369104151745948738773684599735974804411269339893502037770999355512356852950756459016294383463446987459677254906792802624411941044894968496627902535752720719922682420837225706008023100204568370463939255934587114457039667093602577883775051284722476093048204017525255708872018743855748569803252324562442239987721324084204938533024388880125187665696156306961004248317062149458584891622888365586624742569738019618336942987827009421210446066322910942951493282721327550354249842950395867361385530480685611672316655124195639935803137399173839704725379552623061236188308360092615621248292381679996743687717574682819111844192298534349664377308653098260842359532697437217508019608411","exponent":"65537"},"privateTokenKey":{"modulus":"655233284773899116393723965254037801696698300725566766275936826654258495142907913979045929185913265109863385970003406624323481595018756324261299310790491056808297302329632391276913103881393076208299645033588710614559261494707302722507783977399200724348140159626983875283508714177345121713335326639842391794858534046094491830113830494495782179378108514039547480478505539361266248978667623203331307488627852332270695849256574275433092723272753286385586276481663069988062772318032359201353571968113439990801844661333735154680849046146243041252296074855098134303919078306858935419728907350853862501651325118047578668774135649210700373926326953611225093498177251419016301653815929679289944179423851916313533746508754913218127943342958800838776768134542309161766635781839219230364048274290357351229996401510245930204145236969496691547632070316626247273803183828215709980458178696207006437244490975296544826047806535357679939793154140112950479515719810945771779671677082640473780233859926528600967986746594986291539784375441819943747377650887198009048017914744464193002001894333241461923167970891968650704789190901877791697670253446866238601869408393210318668825944237473952630058781690114671227855861551659220898048938562179195801303154563","exponent":"412973832504854920148300381597926139995480720963276635302101813659166599026091433767466792055683557816622930876862851732979930890395421650822241319125257848124319519813659391703681472586856621539893878843361998270366126848961347731142812838098347271311233004769095258441195217172122886270214214904333885217181540310175611937297738413501423298310758049360171326558206048626828565242730745136896760412061309923200228309953035033966146268939749259921006862327411611287164820992243230986635193001127511974305522004074816734047135979677383997771752470634369646696639782848514811273743415887733183461147285278942784755060230524731487383736705871994141373644012581573402336636786587191401427996659740524644217860074292566435250002987398948648478292990879773098538960503914025629585089241068451822531578909463875414555367124306704832400832734704872716612779879122806272565626800586512029712762747707129610319109166315750412118485739374212581666641755273107300212853309624757171194830460371354998373309792145334232613611794968468377414085736437106141257206841427656264860287910975825174163067514522130693271016549680552306482895272969961492088749495737125686764444677066210945139136747491612194434402571526781031983912694254314821079066264577","p":"27335489595959571827978326837068236249017650582840223072522538513874640745993543893152970375033151381164283279402640031549193825703134028405934017507261679864238164217680849275035120940799205041007469572618292940133792039986970715447213051321005468861662163016666718640623356588206956813354429829682284602998163492250039372152948129185601327197028820108115750634502153197722276267598082328031369935245897052552592202247500057227281006270634245716999527142044061402612612988130201430251499962457563469605527885802467604050508101110561150813475022140918016728255136251555188701985715454897935762375190937736857892623617","q":"23970058501192838194013949956146006913161900519140601685096852612718291471897621836734189785759917880468733278460414485256870591624056517204505217946117776953158447072068186135175123848050244174538163811720925091462473929734632471498009752555512018169807821665648601445774448656692309667865342458836782454962509139705798040707342804163429839000150714019647061933569499779162245513911231915796259397179205899702340358123099269315203456514204018118569189889530464987583012500340670624883606389612536610151891962255696940287895059833110215407259296961206995463751258317955853044319593754110084504007729324293663335825539"},"publicTokenKey":{"modulus":"655233284773899116393723965254037801696698300725566766275936826654258495142907913979045929185913265109863385970003406624323481595018756324261299310790491056808297302329632391276913103881393076208299645033588710614559261494707302722507783977399200724348140159626983875283508714177345121713335326639842391794858534046094491830113830494495782179378108514039547480478505539361266248978667623203331307488627852332270695849256574275433092723272753286385586276481663069988062772318032359201353571968113439990801844661333735154680849046146243041252296074855098134303919078306858935419728907350853862501651325118047578668774135649210700373926326953611225093498177251419016301653815929679289944179423851916313533746508754913218127943342958800838776768134542309161766635781839219230364048274290357351229996401510245930204145236969496691547632070316626247273803183828215709980458178696207006437244490975296544826047806535357679939793154140112950479515719810945771779671677082640473780233859926528600967986746594986291539784375441819943747377650887198009048017914744464193002001894333241461923167970891968650704789190901877791697670253446866238601869408393210318668825944237473952630058781690114671227855861551659220898048938562179195801303154563","exponent":"65537"},"serial":"PIPU0000DDA0","sslVerify":false,"enrollmentCredentials":"01d4b24e9d97b96647f4a60681bc577cc25a8447","url":"https://192.168.178.32/ttype/push","expirationDate":"2020-06-11T12:36:50.502500","pushRequests":{"list":[]}}
  //flutter: Key: 799ef5ba-6298-40d8-85f2-62a0821205ea_firebase_config
  //flutter: Value: {"projectID":"piauthenticator-dfbc6","projectNumber":"258156671446","appID":"1:258156671446:ios:f43e5ff74af21419253477","apiKey":"AIzaSyCHISaDD-Db44Cu9b0_AOyY9q4qUetLOvw"}

  Map<String, String> staticStorage = Map();

  FakeStorage() {
    staticStorage.putIfAbsent(
        '1d7d5ad6-0e29-4955-b959-dde0ba8020ed_firebase_config',
        () =>
            '{"projectID":"piauthenticator-dfbc6","projectNumber":"258156671446","appID":"1:258156671446:ios:f43e5ff74af21419253477","apiKey":"AIzaSyCHISaDD-Db44Cu9b0_AOyY9q4qUetLOvw"}');
    staticStorage.putIfAbsent(
        'cc0d13b2-9ce1-11ea-bb37-0242ac130002',
        () =>
            '{"projectID":"piauthenticator-dfbc6","projectNumber":"258156671446","appID":"1:258156671446:ios:f43e5ff74af21419253477","apiKey":"AIzaSyCHISaDD-Db44Cu9b0_AOyY9q4qUetLOvw"}');
    staticStorage.putIfAbsent(
        '1d7d5ad6-0e29-4955-b959-dde0ba8020ed',
        () =>
            '{"label":"PIPU0000DDA0","id":"1d7d5ad6-0e29-4955-b959-dde0ba8020ed","issuer":"privacyIDEA","isRolledOut":true,"firebaseToken":"fwE_jCJfaeU:APA91bE5Lc2uWPNEAnYrOhc1sLBbN7MO_Ua1MdYvl4sr-w5SwBbPl1OgTA9FsMLd70-jiypL9I1ip1ejxIfs2mI7kAeXb7X3WNKYw-tfQlGxq5eX48Mojc_SpOuxi2hlbeLz9AXM2gJS","publicServerKey":{"modulus":"764454122894237352356258556290539179520675221611243422295872187182770540292532490482340960893226159516986828455691316724646870608828175804922510574552520164119064129142974112395655919375941949394539691317200388571078254318441527884987016339562108758901320551793862165440647475509363395795413478875348526337714602802444956420491013060559375281459665965320557934246262172258072420494423295368208334916406048331364149070223257658605541030768997272780402951724742666417070863297765412753050410489748789331733423363518450917779665314355755692090833165386574999157271369104151745948738773684599735974804411269339893502037770999355512356852950756459016294383463446987459677254906792802624411941044894968496627902535752720719922682420837225706008023100204568370463939255934587114457039667093602577883775051284722476093048204017525255708872018743855748569803252324562442239987721324084204938533024388880125187665696156306961004248317062149458584891622888365586624742569738019618336942987827009421210446066322910942951493282721327550354249842950395867361385530480685611672316655124195639935803137399173839704725379552623061236188308360092615621248292381679996743687717574682819111844192298534349664377308653098260842359532697437217508019608411","exponent":"65537"},"privateTokenKey":{"modulus":"655233284773899116393723965254037801696698300725566766275936826654258495142907913979045929185913265109863385970003406624323481595018756324261299310790491056808297302329632391276913103881393076208299645033588710614559261494707302722507783977399200724348140159626983875283508714177345121713335326639842391794858534046094491830113830494495782179378108514039547480478505539361266248978667623203331307488627852332270695849256574275433092723272753286385586276481663069988062772318032359201353571968113439990801844661333735154680849046146243041252296074855098134303919078306858935419728907350853862501651325118047578668774135649210700373926326953611225093498177251419016301653815929679289944179423851916313533746508754913218127943342958800838776768134542309161766635781839219230364048274290357351229996401510245930204145236969496691547632070316626247273803183828215709980458178696207006437244490975296544826047806535357679939793154140112950479515719810945771779671677082640473780233859926528600967986746594986291539784375441819943747377650887198009048017914744464193002001894333241461923167970891968650704789190901877791697670253446866238601869408393210318668825944237473952630058781690114671227855861551659220898048938562179195801303154563","exponent":"412973832504854920148300381597926139995480720963276635302101813659166599026091433767466792055683557816622930876862851732979930890395421650822241319125257848124319519813659391703681472586856621539893878843361998270366126848961347731142812838098347271311233004769095258441195217172122886270214214904333885217181540310175611937297738413501423298310758049360171326558206048626828565242730745136896760412061309923200228309953035033966146268939749259921006862327411611287164820992243230986635193001127511974305522004074816734047135979677383997771752470634369646696639782848514811273743415887733183461147285278942784755060230524731487383736705871994141373644012581573402336636786587191401427996659740524644217860074292566435250002987398948648478292990879773098538960503914025629585089241068451822531578909463875414555367124306704832400832734704872716612779879122806272565626800586512029712762747707129610319109166315750412118485739374212581666641755273107300212853309624757171194830460371354998373309792145334232613611794968468377414085736437106141257206841427656264860287910975825174163067514522130693271016549680552306482895272969961492088749495737125686764444677066210945139136747491612194434402571526781031983912694254314821079066264577","p":"27335489595959571827978326837068236249017650582840223072522538513874640745993543893152970375033151381164283279402640031549193825703134028405934017507261679864238164217680849275035120940799205041007469572618292940133792039986970715447213051321005468861662163016666718640623356588206956813354429829682284602998163492250039372152948129185601327197028820108115750634502153197722276267598082328031369935245897052552592202247500057227281006270634245716999527142044061402612612988130201430251499962457563469605527885802467604050508101110561150813475022140918016728255136251555188701985715454897935762375190937736857892623617","q":"23970058501192838194013949956146006913161900519140601685096852612718291471897621836734189785759917880468733278460414485256870591624056517204505217946117776953158447072068186135175123848050244174538163811720925091462473929734632471498009752555512018169807821665648601445774448656692309667865342458836782454962509139705798040707342804163429839000150714019647061933569499779162245513911231915796259397179205899702340358123099269315203456514204018118569189889530464987583012500340670624883606389612536610151891962255696940287895059833110215407259296961206995463751258317955853044319593754110084504007729324293663335825539"},"publicTokenKey":{"modulus":"655233284773899116393723965254037801696698300725566766275936826654258495142907913979045929185913265109863385970003406624323481595018756324261299310790491056808297302329632391276913103881393076208299645033588710614559261494707302722507783977399200724348140159626983875283508714177345121713335326639842391794858534046094491830113830494495782179378108514039547480478505539361266248978667623203331307488627852332270695849256574275433092723272753286385586276481663069988062772318032359201353571968113439990801844661333735154680849046146243041252296074855098134303919078306858935419728907350853862501651325118047578668774135649210700373926326953611225093498177251419016301653815929679289944179423851916313533746508754913218127943342958800838776768134542309161766635781839219230364048274290357351229996401510245930204145236969496691547632070316626247273803183828215709980458178696207006437244490975296544826047806535357679939793154140112950479515719810945771779671677082640473780233859926528600967986746594986291539784375441819943747377650887198009048017914744464193002001894333241461923167970891968650704789190901877791697670253446866238601869408393210318668825944237473952630058781690114671227855861551659220898048938562179195801303154563","exponent":"65537"},"serial":"PIPU0000DDA0","sslVerify":false,"enrollmentCredentials":"01d4b24e9d97b96647f4a60681bc577cc25a8447","url":"https://192.168.178.32/ttype/push","expirationDate":"2020-06-11T12:36:50.502500","pushRequests":{"list":[]}}');
    //staticStorage.putIfAbsent(
        //'799ef5ba-6298-40d8-85f2-62a0821205ea_firebase_config',
        //() =>
          //  '{"projectID":"piauthenticator-dfbc6","projectNumber":"258156671446","appID":"1:258156671446:ios:f43e5ff74af21419253477","apiKey":"AIzaSyCHISaDD-Db44Cu9b0_AOyY9q4qUetLOvw"}');
  }

  Future<void> write({String key, String value}) async =>
      staticStorage.putIfAbsent(key, () => value);

  Future<Map<String, String>> readAll() async => staticStorage;

  Future<void> delete({String key}) async => staticStorage.remove(key);

  Future<String> read({String key}) async => staticStorage[key];
}

// TODO test the behavior of this class.
class StorageUtil {
  static final FlutterSecureStorage _storage = FlutterSecureStorage();
  //static final FakeStorage _storage = FakeStorage();

  // ###########################################################################
  // TOKENS
  // ###########################################################################

  /// Saves [token] securely on the device, if [token] already exists
  /// in the storage the existing value is overwritten.
  static void saveOrReplaceToken(Token token) async =>
      await _storage.write(key: token.id, value: jsonEncode(token));

  static Future<Token> loadToken(String id) async =>
      (await loadAllTokens()).firstWhere((t) => t.id == id, orElse: () => null);

  /// Returns a list of all Tokens that are saved in the secure storage of
  /// this device.
  static Future<List<Token>> loadAllTokens() async {
    Map<String, String> keyValueMap = await _storage.readAll();

    List<Token> tokenList = [];
    keyValueMap.forEach((_, value) {
      Map<String, dynamic> serializedToken = jsonDecode(value);

      // TODO when the token version (token.version) changed handle this here.

      if (serializedToken.containsKey("counter")) {
        tokenList.add(HOTPToken.fromJson(serializedToken));
      } else if (serializedToken.containsKey("period")) {
        tokenList.add(TOTPToken.fromJson(serializedToken));
      } else if (serializedToken.containsKey("serial")) {
        tokenList.add(PushToken.fromJson(serializedToken));
      }
    });

    return tokenList;
  }

  /// Deletes the saved json of [token] from the secure storage.
  /// If the token is a PushToken, its firebase config is deleted too.
  static Future<void> deleteToken(Token token) async {
    _storage.delete(key: token.id);
    if (token is PushToken) deleteFirebaseConfig(token);
  }

  // ###########################################################################
  // GLOBAL FIREBASE CONFIG
  // ###########################################################################

  static const _GLOBAL_FIREBASE_CONFIG_KEY =
      "cc0d13b2-9ce1-11ea-bb37-0242ac130002";

  static void saveOrReplaceGlobalFirebaseConfig(FirebaseConfig config) async =>
      await _storage.write(
          key: _GLOBAL_FIREBASE_CONFIG_KEY, value: jsonEncode(config));

  static void deleteGlobalFirebaseConfig() async =>
      await _storage.delete(key: _GLOBAL_FIREBASE_CONFIG_KEY);

  static Future<bool> globalFirebaseConfigExists() async =>
      await loadGlobalFirebaseConfig() != null;

  static Future<FirebaseConfig> loadGlobalFirebaseConfig() async {
    String serializedConfig =
        await _storage.read(key: _GLOBAL_FIREBASE_CONFIG_KEY);

    return serializedConfig == null
        ? null
        : FirebaseConfig.fromJson(jsonDecode(serializedConfig));
  }

  // ###########################################################################
  // FIREBASE PER TOKEN
  // ###########################################################################

  static const _KEY_POSTFIX = "_firebase_config";

  static Future<void> saveOrReplaceFirebaseConfig(
      Token token, FirebaseConfig config) async {
    await _storage.write(
        key: token.id + _KEY_POSTFIX, value: jsonEncode(config));
  }

  static Future<FirebaseConfig> loadFirebaseConfig(Token token) async {
    String serializedConfig = await _storage.read(key: token.id + _KEY_POSTFIX);

    return serializedConfig == null
        ? null
        : FirebaseConfig.fromJson(jsonDecode(serializedConfig));
  }

  static void deleteFirebaseConfig(Token token) async =>
      _storage.delete(key: token.id + _KEY_POSTFIX);
}
